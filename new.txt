<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>vanilla Rock Papper Scissors</title>
  <meta name="theme-color" content="#424769">
  <link rel="shortcut icon" href="short.png" type="image/x-icon">
  <!-- Style -->
  <link rel="stylesheet" href="./style.css">
  <!-- Js -->
  <script src="./scripts.js" defer></script>
</head>

<body>

  <div class="shadow"></div>

  <!-- Results -->
  <div class="results">
    <h1 class="title">ROCK PAPER SCISSORS</h1>
    <div class="result-title your">
      <h4>Score</h4>
      <div class="result-score">
        <span data-your-score>0</span>
        <!-- Computer score -->
        <!-- <span data-computer-score>0</span> -->
      </div>

      <!-- Restart -->
      <button class="clear">
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
          <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
          <g id="SVGRepo_iconCarrier">
            <circle opacity="0.5" cx="12" cy="12" r="10" fill="#252B48"></circle>
            <path
              d="M16.4017 6.28616C16.4017 5.98121 16.217 5.70662 15.9346 5.59158C15.6522 5.47653 15.3283 5.54393 15.1152 5.76208L14.3647 6.53037C12.244 5.55465 9.66551 5.95905 7.92796 7.7378C5.69068 10.0281 5.69068 13.7344 7.92796 16.0247C10.1748 18.3248 13.8252 18.3248 16.072 16.0247C17.3754 14.6904 17.9168 12.8779 17.7055 11.1507C17.6552 10.7396 17.2812 10.447 16.87 10.4973C16.4589 10.5476 16.1663 10.9217 16.2166 11.3328C16.3757 12.6335 15.9667 13.9859 14.999 14.9765C13.3407 16.6742 10.6593 16.6742 9.00097 14.9765C7.33301 13.269 7.33301 10.4935 9.00097 8.78596C10.1467 7.61303 11.7795 7.25143 13.225 7.69705L12.4635 8.47659C12.2527 8.69245 12.1917 9.01364 12.3088 9.29174C12.4259 9.56984 12.6983 9.75067 13 9.75067H15.6517C16.0659 9.75067 16.4017 9.41489 16.4017 9.00067V6.28616Z"
              fill="#252B48"></path>
          </g>
        </svg>
      </button>
    </div>
  </div>

  <!-- RPS-Buttons -->
  <div class="selections">
    <div>
      <button class="selection r1" data-selection="rock">
        <img src="./asstets/rock.png" alt="rock">
      </button>
      <h1>Rock</h1>
    </div>
    <div class="paper">
      <button class="selection r2" data-selection="papper">
        <img src="./asstets/paper.png" alt="papper">
      </button>
      <h1>Paper</h1>
    </div>
    <div>
      <button class="selection r3" data-selection="scissors">
        <img src="./asstets/scissors.png" alt="scissors">
      </button>
      <h1>Scissors</h1>
    </div>
  </div>



  <!-- Rules -->
  <div class="rules">
    <div class="rule-section">
      <div class="results-section"></div>
      <div class="results-section" data-final-column></div>
    </div>
  </div>

</body>

</html>


:root {
  --main: #252B48;
  --stuff: #424769;
  --overy: #61677A;

  --trans: 0.2s ease-out;
}

* {
  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
  color-scheme: dark;
}

body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  background: var(--main);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0 30px;
}

.shadow {
  position: fixed;
  top: -95%;
  height: 1500px;
  width: 1500px;
  background: radial-gradient(#ffffff18, transparent, transparent);
  border-radius: 50%;
}

.selections {
  margin-top: 8rem;
  gap: 3rem;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  z-index: 1;
}

.selections .paper {
  margin-top: 40px;
}

.selections h1 {
  font-size: 1.1rem;
  text-align: center;
  color: var(--overy);
  font-weight: 400;
  text-transform: uppercase;
}

.selection {
  background: var(--stuff);
  border: 4px solid #ddd;
  cursor: pointer;
  border-bottom: 15px solid var(--main);
  height: 155px;
  width: 155px;
  border-radius: 50%;
  padding: 35px;
  transition: var(--trans);
  box-shadow: inset 0 10px 1px #252B4820;
}
 .selection:hover {
  box-shadow: inset 0 12px 2px #252B4820;
}
/* .selection.r1 {
  border: 4px solid #b10528c1;
  border-bottom: 15px solid var(--main);
} 
.selection.r2 {
  border: 4px solid #049749;
  border-bottom: 15px solid var(--main);
} */

.selection:active {
  transition: 0.05s;
  box-shadow: inset 0 6px 0px #252B4820;
}

.selection:active img {
  opacity: 0.9;
}

.selection img {
  transition: 0.1s;
  height: 55px;
  width: 55px;
  opacity: 0.8;
  object-fit: contain;
  user-select: none;
  -webkit-user-drag: none;
}



/* RUSULTS */
.results {
  margin-top: 4rem;
  border: 3px solid #ffffff40;
  padding: 10px 10px 10px 25px;
  max-width: 500px;
  width: 100%;
  height: 110px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-radius: 15px;
}

.results .title {
  width: 10px;
}

.results h1 {
  font-size: 1.7rem;
}

.result-title {
  position: relative;
  width: 130px;
  height: 100%;
  background: #fff;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: var(--overy);
}

.result-title h4 {
  position: relative;
  bottom: 10px;
  font-size: 1.2rem;
  height: 10px;
  text-transform: uppercase;
}

.result-title span {
  position: relative;
  bottom: 20px;
  font-size: 2.5rem;
  color: var(--main);
}

.clear {
  position: absolute;
  bottom: 5px;
  width: 20px;
  background-color: transparent;
  border: none;
  left: 5px;
}

.clear svg {
  width: 25px;
  cursor: pointer;
}



/* RULES */
.rules {
  display: none;
  position: fixed;
  height: 100vh;
  top: 0;
  left: 0;
  overflow-y: scroll;
  scroll-snap-type: mandatory;
}

.rule-section {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

.rules .results-selection {
  position: relative;
  opacity: 0.8;
  text-align: center;
  background: var(--overy);
  padding: 10px;
  font-size: 20px;
}

.rules .results-selection.winner {
  opacity: 1;
}


@media screen and (max-width: 600px) {
  .selections {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 8rem;
  }

  .selections .paper {
    margin-top: 0px;
  }
}

@media screen and (max-width: 400px) {
  .selections {
    margin-top: 4rem;
  }

  .results {
    top: 80vh;
  }


  .result-title {
    font-size: 1rem;
  }
}


const selectionButtons = document.querySelectorAll("[data-selection]");
const finalColumn = document.querySelector("[data-final-column]");
const dataYourScore = document.querySelector("[data-your-score]");
// const dataComputerScore = document.querySelector("[data-computer-score]");


SELECTIONS = [
  {
    name: "rock",
    emoji: "✊ Rock",
    beats: "scissors"
  },
  {
    name: "papper",
    emoji: "✋ Paper",
    beats: "rock"
  },
  {
    name: "scissors",
    emoji: "✌️ Scissors",
    beats: "papper"
  }
]

selectionButtons.forEach(selectionButton => {
  selectionButton.addEventListener("click", e => {
    const selectionName = selectionButton.dataset.selection;
    const selection = SELECTIONS.find(selection => selection.name === selectionName);
    makeSelection(selection)
  })
})

function makeSelection(selection) {
  computerSelection = randomSelection()
  const yourWiner = isWinner(selection, computerSelection);
  const computerWiner = isWinner(computerSelection, selection);

  addSelectionResult(computerSelection, computerWiner);
  addSelectionResult(selection, yourWiner);

  if (yourWiner) incrementScore(dataYourScore)
  // if (computerWiner) incrementScore(dataComputerScore)
  console.log(computerSelection);
}

function incrementScore(scoreSpan) {
  scoreSpan.innerHTML = parseInt(scoreSpan.innerText) + 1;
}

function addSelectionResult(selection, winner) {
  const div = document.createElement("div");
  div.innerHTML = selection.emoji;
  div.classList.add("results-selection");
  if (winner) div.classList.add("winner");
  finalColumn.after(div);
}



function isWinner(selection, opponentSelection) {
  return selection.beats === opponentSelection.name;
}

function randomSelection() {
  const randomIndex = Math.floor(Math.random() * SELECTIONS.length);
  return SELECTIONS[randomIndex]
}


const selectionButtons = document.querySelectorAll("[data-selection]");
const finalColumn = document.querySelector("[data-final-column]");
const dataYourScore = document.querySelector("[data-your-score]");
// const dataComputerScore = document.querySelector("[data-computer-score]");


SELECTIONS = [
  {
    name: "rock",
    emoji: "✊ Rock",
    beats: "scissors"
  },
  {
    name: "papper",
    emoji: "✋ Paper",
    beats: "rock"
  },
  {
    name: "scissors",
    emoji: "✌️ Scissors",
    beats: "papper"
  }
]

selectionButtons.forEach(selectionButton => {
  selectionButton.addEventListener("click", e => {
    const selectionName = selectionButton.dataset.selection;
    const selection = SELECTIONS.find(selection => selection.name === selectionName);
    makeSelection(selection)
  })
})

function makeSelection(selection) {
  computerSelection = randomSelection()
  const yourWiner = isWinner(selection, computerSelection);
  const computerWiner = isWinner(computerSelection, selection);

  addSelectionResult(computerSelection, computerWiner);
  addSelectionResult(selection, yourWiner);

  if (yourWiner) incrementScore(dataYourScore)
  // if (computerWiner) incrementScore(dataComputerScore);
  console.log(computerSelection);
}

function incrementScore(scoreSpan) {
  scoreSpan.innerHTML = parseInt(scoreSpan.innerText) + 1;
}

function addSelectionResult(selection, winner) {
  const div = document.createElement("div");
  div.innerHTML = selection.emoji;
  div.classList.add("results-selection");
  if (winner) div.classList.add("winner");
  finalColumn.after(div);
}

function isWinner(selection, opponentSelection) {
  return selection.beats === opponentSelection.name;
}

function randomSelection() {
  const randomIndex = Math.floor(Math.random() * SELECTIONS.length);
  return SELECTIONS[randomIndex]
}